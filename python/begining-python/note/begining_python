three day learn python

python

1. 基础知识
2. 列表和元组
3. 字典
4. 字符串
5. 条件、循环和其他语句
6. 抽象

7. OO

上午花两个小时搞定前六章

1. 基础知识
	1.1 安装python
	1.2 交互式python解释器
		python每行不用分号结束,加上分号不会有任何作用
		一行多条语句的时候，需要用分号隔开
		print "hello"; help();
	1.3 算法
		算法 （程序，食谱） 详细描述如何做某事，包含一系列有顺序的指令
	1.4 数字和表达式
		1/2 =>0 整数
		策略	1. 1.0/2.0 1/2.0
				2. from __future__ import division 或者 命令开关_Qnew(?)
		1//2 整除操作符 1.0//2.0
		1%2	取余（模除）运算
		2**3 幂（乘方）运算
		取反（一元减运算符）	-3**2 等同 -(3**2)  **优先级高
		
		长整数型 
			100000000L （普通整数2 147 483 647）（L大小写都可以，一般大写，区别1)
		十六进制和八进制
			0xAF => 175 十六进制
			010 => 8	八进制
	1.5 变量
		变量是代表和引用某值的名字
		x = 3 赋值运算
		变量名可以包含字符、数字和下划线，但不能数字开头
	1.6 语句
		表达式是食谱的要素，
		表达式是某事，语句（指令）是做某事
		交互式解释器总是把所有表达式的值打印出来（repr）
		python3.0 print(42) 
		语句特性的一般定义：他们改变了事物
		变量 就像是临时存储器
	1.7 获取用户的输入
		input函数 x = input()
		if 1==1: print "hello"
	1.8 函数
		pow(2,3) == 2**3
		函数实现特定功能的程序块 调用函数，参数
		pow等标准函数称为内建函数
		函数调用可以简单看作另外一类表达式
		abs(-10) 绝对值 rand(1.0/2.0) 四舍五入整数 floor
	1.9 模块
		import导入模块，模块.函数来调用
		import math
		math.floor(32.9) => 32.0 	
		int(math.floor(32.9)) => 32 
		int long float 类型对象 （floor ceil）
		确定自己不会导入多个同名函数（从不同模块导入），可以使用
		from math import sqrt
		sqrt(9)
		可以用变量来引用函数 变量foo=math.sqrt foo(4)==>2.0
		
		cmath和复数
			sqrt(-1) 语法错误或者man
			man是一个特殊值的简写，意思是 not a number（非数值）
			import cmath; cmath.sqrt(-1)
			注意： 如果使用了from...import...语句，就没法使用普通的sqrt函数了。因此，除非真的需要from这个形式的模块导入语句，否则应该坚持使用普通的import。
			1j 虚数 python中没有单独的虚数类型，他们被看作实数部分为0的复数
		回到__future__
			时光机，通过它可以导入那些未来会成为标准python组成部分的新特性
	1.10 保存并执行程序
		python hello.py
		#!/usr/bin/env python 或者#!/usr/bin/python2
		注释#
		汝应注释 VS 如果难写就该难读
	1.11 字符串
		字符串表示一些文本
		单引号字符串
		双引号字符串
		转移引号\
		
		拼接字符串
			"yang" "zizhe" python会自动拼接 但不是拼接字符串的一般方法
			x + y (x y 这样不行)
		
		字符串 str repr
			Python打印值的时候会保持该值在python代码中的状态，print 显示用户所看到的状态
			"hello, world" 	=> 'hello world';
			1000L 			=> 1000L
			print "hello"	=> hello
			print 1000L		=> 1000
		值被转换成字符串的两种机制
			str  它会把值转换为合理形式的字符串，以便用户可以理解
			repr 它会创建一个字符串，它已合法的python表达式的形式来表示值
			repr(x) == (·x·) 反引号 3.0已经不能用了
		不可以直接将字符串和数字进行相加。(str expr)
		str repr 反引号是将python值转换为字符串的三种方法
		
		input raw_input
		input会假设用户输入的是合法的python表达式
		raw_input它会把所有的输入当做原始数据处理（raw data）
		
		长字符串
			''' """ 可以跨多行 (里面的单引号和双引号不用转义)
			普通字符串也可以跨行 \ （转义了换行符） （也适用于表达式和语句）
		原始字符串
			原始字符串对于反斜线的使用并不会过分挑剔。
			"C:\nowWhere" 普通字符串会转义
			"C:\\nowWhere" 转义反斜线，可能路径需要很多个反斜线
			r'yang' 原始字符串以r开头
			原始字符串不会把反斜线当做特殊字符，在原始字符串中输入的每个字符都会与书写的方式保持一致（放入任何字符） 
			原始字符串的最后一个字符不能使反斜线。除非你对反斜线进行转义(两个反斜线) （反斜线引起python歧义）
			用字符串拼接( 'a' 'b' 或 x + y) 解决最后一个反斜线
			'''也可充当原始字符串
		Unicode字符串
			u'hello, world'
				python的普通字符串在内部是以8位的ASCII码形式存储的
				而Unicode字符串则存储为16位的Unicode字符串
	
2. 列表和元组 （数据结构）
	数据结构：数据结构是通过某种方式（例如对元素进行编号）组织在一起的数据元素的集合。元素可以使数字或者字符，甚至是其他数据结构。
	序列，python最基本的数据结构。元素的位置即索引。
	
	2.1 序列概览
		python包含6种内建的序列：列表、元素、字符串、Unicode字符串、buttfer对象和xrange对象
		列表和元组的主要区别在于，列表可以修改，元组则不能。
		一般来说，在几乎所有的的情况下列表都可以替代元组(例外情况，使用元组作为字典的键，在这种情况下，因为键不可以修改，所以就不能使用列表)
		
		python之中还有一种名为容器的数据结构（container）。容器基本上是包含其他对象的任意对象。
		序列（例如列表和元组）和映射（例如字典）是两类主要的容器。 索引和键值
		至于既不是序列也不是映射的容器类型 集合(set)
		
	2.2 通用序列操作
		所有序列类型都可以进行某些特定的操作。包括索引indexing 分片sliceing 加adding 乘multiplying以及检查某个元素是否属于序列的成员（成员资格）。
		python还有计算序列长度、找出最大元素和最小元素的内建函数。
		迭代iteration，对序列进行迭代的意思是：依次对序列中的每个元素重复执行某些操作。
		
		索引 （编号，键值）
			序列中的所有元素都是有编号的--从0开始递增，元素可以通过编号分别访问。
			greeting = "hello"; greeting[0];greeting[-1];
			使用负数索引时，python会从右边开始计数，最后1个元素的编号是-1
			字符串就是一个由字符组成的序列。索引0指向第1个元素
			
			序列（包含字符串）字面值能够直接使用索引，而不需要一个变量引用他们。
			'hello'[1]
			函数调用返回一个序列，也可直接对返回结果进行索引操作
			raw_input('Year:')[3] 若不存在这个索引会引发异常
		
		分片
			使用索引来访问单个元素类似，使用分片操作来访问一定范围内的元素
			第1个索引是需要提取部门的第1个元素的编号，最后的索引则是分片之后剩下部分的第1个元素的编号。（第一个索引包含在分片，第二个不包含）
			number=[1,2,3,4,5,6,7,8,9,10]
			number[3:6]  => [4, 5, 6]
			number[6:-2] => [7, 8]
			
			优雅的捷径
				访问最后三个元素
				number[7:10] => [8, 9, 10]
				number[7:11] => [8, 9, 10]
				number[-3:-1]=> [8, 9]
				number[-3:0] => [] 最左边的索引比它右边的晚出现在序列中，结果就是一个空序列
				number[-3:]  => [8, 9, 10]
				number[:]    => 复制全部
		
			更大的步长
				分片开始和结束点需要进行指定的，步长隐式设置的，步长默认是1, 
				number[0:10:2]  => [1, 3, 5, 7, 9]
				number[3:6:2]	=> [4, 6]
				number[::4]		=> [1, 5, 9]
				步长不能为0，可以使负数，即从右到左提取元素, 开始点要大于结束点
				number[8:3:-1]	=> [9, 8, 7, 6, 5]
				number[0:10:-2]	=> []
				number[5::-2]	=> [6, 4, 2]
		
		序列相加
			[1,3,4] + [4,5,6]
			两种相同类型的序列才能进行连接操作
			
		乘法
			'python' * 5
			[1,2,3] * 5
			[] * 5 = []
			创建一个占用10个元素空间，却不包含任何有用内容的列表
			None python的一个内建值，代表这里什么也没有的意思
			[None] * 10 = [None, ...] 注意区分大小写
			
		成员资格
			检查一个值是否在序列中，可以使用in运算符 （布尔运算符）
			'w' in permissions
			raw_input('Enter your user name: ') in users  可以用来做安全策略（密码）
			Enter your user name: yang => True
			
			subject =  '$$$ Get rich now!!! $$$'
			'$$$' in subject  => True (可作为垃圾邮件过滤器的一部分)
			
			in 运算符会检查一个对象是否为某个序列（或者是其他的数据集合）的成员（元素）
			字符串唯一的成员或者元素就是它的字符， p2.3 以后支持子字符串的查询
		
		长度、最大值、最小值
			len(number)
			min(number)
			max(number)
			max(5,6,0,9) 参数非序列
	
	2.3 列表：Python的苦力
		列表是可变的（mutable） 可以改变列表的内容
		
		list函数
			因为字符串不能像列表一样被修改，所以有时根据字符串创建列表会很有用。
			list('hello') => ['h','e','l','l','o']
			list函数适用于所有类型的序列，而不只是字符串
			字符组长的列表转换为字符串：''.join(somelist)
			''.join(['ad','bd','cf']) => 'adbdcf'
			
			list函数实际上是一种类型而不是函数
		
		基本的列表操作
			列表可以使用所有适用于序列的标准操作，例如索引、分片、连接和乘法
			改变列表的方法：元素赋值、元素删除、分片赋值以及列表的方法
			并不是所有的列表方法都真正地改变列表
			
			1. 改变列表：元素赋值
				x[1] = 2;  
				不能为一个位置不存在的元素进行赋值，Node初始化
			2. 删除元素
				del names[2] del可以删除字典元素甚至变量
			3. 分片赋值 (替换原来的序列片段)
				name[2:] = list('ar')
				name[1:] = list('ython') 	可以使用与原序列不等长的序列赋值
				name[1:1] = [2,3,4]			可以不需要替换任何原有元素的情况下插入新的元素（替换了一个空的分片）
				number[1:4] = []				可以删除分片 相当于 del number[1,4]
		
		列表方法
			方法是一个与某些对象有紧密联系的函数 对象.方法(参数)
			对象（列表、数字、字符串、其他类型）
			
			append 列表末尾追加新的对象
				如果使用了list作为变量名，就无法调用list函数了。（list内建函数）
				append直接修改原来的列表
				lst.append(4)				
			count 统计某个元素在列表中出现的次数
			extend 可以在列表的末尾一次性追加另一个序列中的多个值
				a.extend(b)	修改了被扩展的序列，就是a
				a + b		连接操作  返回一个全新的列表，
				连接操作的效率回比extend方法低
				a = a + b 它也不会修改原来的列表
				a[len(a):] = b
			index 用于从列表中找出某个值第一个匹配项的索引位置
				a.index("who") => 4 (a[4] = who)
				搜索不到的时候，就会引发一个异常
			insert 用于将对象插入到列表中
				numbers.insert(3,'four'); 第四个位置
				numbers[3:3] = ['four']; 可读性不如insert
			pop 会移除列表中的一个元素，默认是最后一个，并返回该元素的值
				x.pop()
				d = a.extend(b) d什么都没有 None
				pop方法是唯一一个既能修改列表又返回元素值（除了None）的列表方法
				栈  （LIFO 后进先出） 出栈pop入栈push 对应pop和append
				队列（FIFO 先进先出） 对应insert(0,...)+ pop 或者append + pop(0)
				更好的解决方案是collection模块中的deque方法 （queue队列）
			remove remove 用于移除列表中某个值的第一个匹配项
				x.remove('be')  不存在的值会报异常
				remove是一个没有返回值的原位置改变方法
			reverse 将列表中的元素反向存放
				改变了列表但不返回值，像remove，sort
				返回一个迭代器iterator对象。
				list(reversed(x)) => 返回的是列表
			sort 用于在原位置对列表进行排序，而不是返回一个已排序的列表副本
				sort返回的是一个空值
				None => nothing  而 print None=> None
				需要一个排好序的副本，同时有保留原有的列表不变的时候
				x = [8,5,3,4];
				y = x[:]; 	//y = x; 不行，这样做x，y指向的是同一个列表
				y.sort
				y = x[:] 这是一种很有效率的复制整个列表的方法
				或者 y = sorted(x)	
				sorted可以应用于任何序列，并返回一个列表
				
				相反的顺序排序 sorted(x).reverse() 或者reverse参数
			
			高级排序
				python默认的排序规则是按升序排列元素
				特定的规则排序 
				compare(x,y)自定义比较函数
				内建函数cmp提供了比较函数的默认排序
				cmp(10,20);
				numbers.sort(cmp)
				sort方法有另外两个可选的参数--key和reverse ，通过名字来指定，关键字参数
				参数key与参数cmp类似，必须提供一个在排序过程中使用的函数。该函数并不是直接用来确定对象的大小，而是为每个元素创建一个键，然后所有的元素根据键来排序。
				x.sort(key=len) 根据元素的长度排序
				关键字参数reverse是简单的布尔值，用来指明列表是否要进行反向排序。
				x.sort(reverse=True)
				
				cmp key reverse参数都可以用于sorted函数
				
	2.4 元组 不可变序列
		元组和列表唯一的不同是元组不能修改。（字符串也是）
		1,2,3 或者 (1,2,3)
		() 空元组
		42, 或者(42,) 包括一个值的元组
		42 和 (42) 是完全一样的，逗号却能彻底改变表达式的值
		3*(40+2) 	=>126
		3*(40+2,) 	=>(42,42,42)
		
		tuple函数 以一个序列作为参数并把它转换为元组
			tuple([1,2,3]) =>(1,2,3)
			list($a,$b) = array('sa','sb') // php的list
		元组的操作就是创建元组和访问元组
			x[1] 
			x[0:2] 元组的分片还是元组
		元组的意义
			元组可以在映射（和集合的成员）中当作键使用，而列表则不行
			元组作为很多内建函数和方法的返回值存在，也就是说你必须对元组进行处理。
				（不能修改元组和使用列表的操作）
			一般来说，列表可能更能满足对序列的所有需求

3. 使用字符串
	3.1 序列的基本操作都适用
		字符串都是不可变的
	3.2 字符串格式化:精简版
		% 字符串格式化操作符
		print format % value (format s%,s%) (value元组或者字典)
	...
	3.4 字符串方法
	    字符串方法完全来源于string模块，但是这个模块还包括一些不能作为字符串方法使用的常量和函数。maketrans函数
	    字符串常量
	    string.lowercase ...
	    
	    find: 可以在一个较长的字符串中查找子字符串,它返回子串所在位置的最左端索引，如果没有找到则返回-1.
	        'abc hello'.find('he');
	        subject.find('$$$') 与 '$$$' in subject
	        注意字符串的find方法并不返回布尔值
	        subject.find('$$$')
	        subject.find('$$$', 1)      指定起点
	        subject.find('$$$', 1, 16)  指定起点和结束点 这个范围包含第一个索引，不包含第二个索引，这是python中的惯例
	    join: split方法的逆方法，用来在队列中添加元素
	        '' "" 是一样的，都需要对特殊字符转义
	        seq = ['1','2','3','4'];
	        sep = '+';
	        sep.join(seq)  => '1+2+3+4' 表达式的值，sep还是原来的
	        连接数字的时候回报typeError的错误
	        dirs = '', 'usr', 'bin', 'env'
	        '/'.join(dirs) => /usr/bin/env
	        print 'C:' + '\\'.join(dirs) C:\use\bin\env
	        需要添加的队列元素都必须是字符串
	    lower: 返回字符串的小写字母版
	        如果编写不区分大小写的代码的话，就把存储和搜索时的所有名字都转换为小写。
            'AbcTDSD'.lower()
            title：会将字符串转换为标题，也就是所有单词的首字母大写，其他字母小写
            （但是它使用的单词划分方法可能会得到并不自然的结果）
            capwords函数：首字母大写
        replace: 返回某字符串的所有匹配项均被替换之后得到的字符串
            查找替换功能
        split: join的逆方法，用来将字符串分割成序列
            '!+2+3+4'.split('+') 列表
            'Useing the default'.split()
            如果不提供任何分隔符，程序会把所有空格作为分隔符（空格、制表、换行）
        strip：返回去除两侧（不包括内部）空格的字符串
            与lower一起用来提高用户体验
            也可以去除指定的字符 abc.strip('*!')
            lstrip rstrip
        translate : 和repalce一样，可以替换字符串中的某些部分，但是只处理单个字符。
            它的优势在于可以同时进行多个替换，有些时候比replace效率高很多。
            平台差异的字符，比如换行符
            
4. 字典
	映射（名字引用值的数据结构） 字典是python中唯一内建的映射类型
	4.1 字典的使用
		键值对的场合
	4.2 创建和使用字典
		phonebook={'Alice':'2341','Beth':'9102','Cecil':'3258'}
		dict函数
			dict([('name','Gumby'),('age',42)])
			dict(name='Gumby', age=42)
        基本字典操作
        	len(d) 返回数量
        	d[k]
        	d[k] = v
        	del d[k] 删除键为K的项
        	k in d 检查d中是否含有键为k的项

        	键类型，整型、浮点型、字符串或者元组，任何不可变类型
        	自动添加 主要是和列表相比，列表必须使用append 
        	成员资格 k in d (字典查找的是键) v in l （列表查找的是值）

        字典的格式化字符串
        	转换说明符%的后边加上（用圆括号括起来的）键
        	“number is %(Cecil)s.” % phonebook
        	模板系统中非常有用
        	template = '''<html><head><title>%(title)s</title></head>%(text)s<body></body></html>''';
        	data = {'title': 'My Home Page', 'text': 'welcome my home page'}
        	print template % data
        字典方法
        	
        	clear 原地操作，返回None
        		y = x y和x会指向同一个字典， x = {} 与 x.clear() 的结果是不一样的（y的值）

        	copy 属于浅复制 shallow copy，不是副本 （如果字典中含有列表的话，没有复制里面的列表）
        		from copy import deepcopy
        		dc = deepcopy(d)
        		deepcopy 属于深复制 deep copy，复制其包含所有的值

        	fromkeys 使用给定的键建立新的字典，每个键默认对应的值为None
        		{}.fromkeys(['name', 'age']) 空字典
        		dict.fromkeys(['name', 'age']) 类型字典调用方法
        		dict.fromkeys(['name', 'age']， '(unknown)')

        	get 更宽松的访问字典项的方法
        		d = {}
        		print d['name'] error
        		print d.get('name') None
        		print d.get('name', 'N/A') None
        	has_key
        		d.has_key(k) 相当于 k in d
        	items和iteritems

        	keys和iterkeys

        	pop

        	popitem 
        		字典是无序的 没有类似append的方法

        	setdefault

        	update
        		d.update(x)

        	values和itervalues

				





































	        
	    
	    
			
