5. 条件、循环和其他语句
	5.1 逗号输出
		print ，（空格）
		把某件事作为另一件事导入
		import somemodule
		from somemodule import somefunction
		from somemodule import somefunction,anotherfunciton,...
		from somemodule import *
		同名
			module1.open module2.open
			import math as foobar 模块别名
			import math import sqrt as foobar 函数别名
	5.2 复制魔法
		序列解包
			x, y, z = 1, 2, 3
			x, y = y, x
			values = 1, 2, 3
			x, y, z = values
			key, value = d.popitem()
			左右值的数量完全一致
		链式赋值
			x = y = somefunction
			相当于 y = somefunction; x = y
			未必等于 x = somefunction; y = somefunction;
		增量赋值
			+= *= /= %=
			'bar' *= 2
	5.3 语句块
		tab缩进 空格缩进
		同样的缩进量
		python冒号（:）标示语句块的开始

	5.4 条件和条件语句
		bool变量
			假值 False None 0 "" () [] {}
			bool类型 True False
			bool()  不需要显式转换python会自动转换这些值
			bool([]) == bool("")==False
			[]!="" ()!=False

		条件执行和if语句
			条件：if和冒号之间的表达式
			：分隔符
			if elif else
			嵌套

			条件运算符
				== < > >= <= != 
				is "is not" （对象）  同一性元素
				in "not in" （容器）
				
			连接比较
				0<age<100 （python可以的）

			== 是否相等 is是否等同
			避免使用is运算符来比较类似数值和字符串这类不可变值，因为比较结果的不可预测的

			in：成员资格运算符

			字符串和序列比较
				字符串 字符顺序比较 locale模块决定
				大小写比较 upper lower
				ord chr函数 顺序值 ord('a') chr(100)
				序列比较
				[1,2] < [2,1]
				[2,[1,4]] < [2,[1,5]]
			
			布尔运算符
				and
				or
				not
				a if b else c (b true return a, or return c)

			断言
				if not condition:
					crash program

				assert 0<age<100 
				断言 为真程序才正常工作
	5.5 循环
		while循环
			while condiction:
				expression1

			while not name:
				name = raw_input('Please input your name:')
			空格不为假
			while not name or name.isspace()
			while not name.strip()

		for循环
			要便利集合序列（可迭代对象）
				for word in words
			迭代 (循环的另一种说法)
				迭代某范围的数字
				range(0,10) 含下限不含上限 范围函数
				range(10) 默认为0
				range(10) 相当于 [0,1,2,3,4,5,6,7,8,9]

				for number in range(1,101)

				如果能使用for循环，就尽量不用while循环，它更简洁
				xrange 一次只创建一个数 巨大序列更高效
				range 一次创建一个序列
		循环遍历字典元素
			d = {'x':1, 'y':2, 'x':3}
			for key in d:
				print key, 'corresponeds to', d[key]
			序列解包
			for key,value in d.items():
				print key, 'corresponeds to', d[key]
			字典的顺序通常是没有定义的，如果顺序很重要的话，可以把键值对保存在单独的列表中

		一些迭代工具
			并行迭代
				for i in range(len(names)) 是否有性能问题？
				zip函数 支持非等长序列
				zip(range(10), xrange(100000)) 5
			编号迭代