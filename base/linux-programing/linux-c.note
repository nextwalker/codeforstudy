第一章 基础知识
    1.1 源程序编译
    
    1.2 Makefile的编写
        makefile:
        target:components
        TAB rule
        $@目标文件 $^ 所有依赖文件 $< 第一个依赖文件
        ..c.o: 所有的.o文件都是依赖与相应的.c文件的
    
    1.3 程序库的链接
        链接 
        -L
        -lm 系统函数库

    1.4 程序的调试
        调试
        -g调试
        
    1.5 头文件和系统求助
        man 3 write
        man 3 是C语言系统函数库的帮助

第二章 进程介绍
    2.1 进程的概念
    
    2.2 进程的身份
    
    2.3 进程的创建
    
    2.4 守护进程的创建

第三章 文件操作
    3.1 文件的创建和读写
    3.2 文件的各个属性
    3.3 目录文件的操作
    3.4 管道文件

第四章 时间概念
    4.1 时间的表示
        date
        
        #include <time.h>
        time_t time(time_t *tloc);
        char *ctime(const time_t *clock);
        time函数返回从1970年1月1日0点以来的秒数，存储在time_t机构之中。
        ctime函数将秒数转化为字符串。返回类型是固定的，固定长度为26
        Thu Dec 7 14:58:59 2000
                
    4.2 时间的测量
        struct timeval {
            long tv_sec;
            long tv_usec;
        }
        int gettimeofday(struct timeval *tv, timezone *tz);
        
        C语言触发运算，一定要注意类型转换的问题。（整型除法没有小数）
        
    4.3 计时器的使用
        linux操作系统为每一个进程提供3个内部间隔计时器
        ITIMER_REAL 减少实际时间，到时的时候发出SIGALRM信号
        ITIMER_VIRTUANL 减少有效时间(进程执行的时间)，产生SIGVTALRM信号
        ITIMER_PROF 减少进程的有效时间和系统时间(为进程调度用的时间) 产生SIGROF信号
        这个经常和上面一个使用用来计算系统内核的时间和用户时间
        
        #include <sys/time.h>
        int getitimer(int which, struct itimerval *value);
        int setitimer(int which, struct itimerval *newval, struct itimerval *oldval);
        strcut itimerval {
            strcut timeval it_interval;
            struct timeval it_value;
        }
        
        getitimer函数得到间隔计时器的时间值,保存在value中。
        setitimer函数设置间隔计时器的时间值为newval，并将旧值保存在oldval
        which 表示使用三个计时器的哪一个
        itimerval结构中的it_value是减少的时间，当这个值为0的时候就发出相应的信号了。然后设置为it_interval值。
        
        
第五章 信号处理
    5.1 信号的产生
    5.2 信号的处理
    5.3 其它信号函数
    5.4 实例

第六章 消息管理 IPC进程通信
    6.1 POSIX无名信号量
    6.2 System V信号量
    6.3 System V消息队列
    6.4 System V共享内存
    
5-6讲的太简单了，要看unix环境编程那本书。
    
第七章 线程操作
    7.1 线程的创建和使用
    
    #include <pthread.h>
    int pthread_create(pthread_t *thread, pthread_attr_t * attr,
        void *(*start_routine)(void *), void *arg);
    void pthread_exit(void *retval);
    int pthread_join(pthread *thread, void **thread_return);
    
    pthread_create 创建一个线程，pthread用来表明创建线程的ID，attr指出线程创建时候的属性。
    

第八章 网络编程
    8.1 网络知识介绍
    8.2 初等网络函数介绍TCP
    8.3 服务端和客户机的信息函数
    8.4 完整的读写函数
    8.5 用户数据报发送
    8.6 高级套接字函数
    8.7 TCP/IP协议
    8.8 套接字选项
    8.9 服务器模型
    8.10 原始套接字
    8.11 后记
    
第九章 Linux下C开发工具介绍
    9.1 GNU C 编译器
    9.2 GDB
    9.3 其他