1. Overview
    FriendFeed使用了一款使用 Python 编写的，相对简单的 非阻塞式 Web 服务器。
    其应用程序使用的 Web 框架看起来有些像 web.py 或者 Google 的 webapp， 不过为了能有效利用非阻塞式服务器环境，这个 Web 框架还包含了一些相关的有用工具 和优化。
    
    Tornado 就是我们在 FriendFeed 的 Web 服务器及其常用工具的开源版本。
    Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。
    得利于其 非阻塞的方式和对 epoll 的运用，Tornado 每秒可以处理数以千计的连接，因此 Tornado 是实时 Web 服务的一个 理想框架。
    我们开发这个 Web 服务器的主要目的就是为了处理 FriendFeed 的实时功能 ——在 FriendFeed 的应用里每一个活动用户都会保持着一个服务器连接。
    （关于如何扩容 服务器，以处理数以千计的客户端的连接的问题，请参阅 The C10K problem ）
    
    启动
        application.listen(8888)
        tornado.ioloop.IOLoop.instance().start()
    
    我们清理了 Tornado 的基础代码，减少了各模块之间的相互依存关系，所以理论上讲， 你可以在自己的项目中独立地使用任何模块，而不需要使用整个包。
    
2. 下载和安装
    github库中包含相关的demo
    PycURL 依赖 
    
3. 模块索引
    主要模块
        web - FriendFeed 使用的基础 Web 框架，包含了 Tornado 的大多数重要的功能
        escape - XHTML, JSON, URL 的编码/解码方法
        database - 对 MySQLdb 的简单封装，使其更容易使用
        template - 基于 Python 的 web 模板系统
        httpclient - 非阻塞式 HTTP 客户端，它被设计用来和 web 及 httpserver 协同工作
        auth - 第三方认证的实现（包括 Google OpenID/OAuth、Facebook Platform、Yahoo BBAuth、FriendFeed OpenID/OAuth、Twitter OAuth）
        locale - 针对本地化和翻译的支持
        options - 命令行和配置文件解析工具，针对服务器环境做了优化
    底层模块
        httpserver - 服务于 web 模块的一个非常简单的 HTTP 服务器的实现
        iostream - 对非阻塞式的 socket 的简单封装，以方便常用读写操作
        ioloop - 核心的 I/O 循环
        
4. Tornado 攻略
    4.1 请求处理程序和请求参数
        Tornado的Web程序会将URL或者URL范式映射到tornado.web.RequestHandler的子类上去。
        在其子类中定义了 get() 或 post() 方法，用以处理不同的 HTTP 请求。
        你可以使用 get_argument() 方法来获取查询字符串参数，以及解析 POST 的内容
        上传的文件可以通过 self.request.files 访问到 该对象将名称（HTML元素 <input type="file">的 name 属性）对应到一个文件列表 
        每一个文件都以字典的形式 存在，其格式为 {"filename":..., "content_type":..., "body":...}
        
        返回 403 unauthorized, 只需要抛出一个 tornado.web.HTTPError 异常：
        if not self.user_is_logged_in():
            raise tornado.web.HTTPError(403)
        
        请求处理程序可以通过 self.request 访问到代表当前请求的对象。该 HTTPRequest 对象包含了一些有用的属性
            arguments - 所有的 GET 或 POST 的参数
            files - 所有通过 multipart/form-data POST 请求上传的文件
            path - 请求的路径（ ? 之前的所有内容）
            headers - 请求的开头信息
    
        print(a) => {'a': 2}
        
    4.2 重写 RequestHandler 的方法函数
        除了 get()/post()等以外，RequestHandler 中的一些别的方法函数，这都是 一些空函数，它们存在的目的是在必要时在子类中重新定义其内容。
        
        对于一个请求的处理 的代码调用次序如下：
        1. 程序为每一个请求创建一个 RequestHandler 对象
        2. 程序调用 initialize() 函数，这个函数的参数是 Application 配置中的关键字 参数定义。
            initialize 方法一般只是把传入的参数存 到成员变量中，而不会产生一些输出或者调用像 send_error 之类的方法。
            initialize 方法是 Tornado 1.1 中新添加的，旧版本中你需要 重写 __init__ 以达到同样的目的
        3. 程序调用 prepare()。无论使用了哪种 HTTP 方法，prepare 都会被调用到，因此 这个方法通常会被定义在一个基类中，然后在子类中重用。
            prepare可以产生输出 信息。如果它调用了finish（或send_error` 等函数），那么整个处理流程 就此结束。
        4. 程序调用某个 HTTP 方法：例如 get()、post()、put() 等。如果 URL 的正则表达式模式中有分组匹配，那么相关匹配会作为参数传入方法。
    
        其它设计用来被复写的方法有：
        get_error_html(self, status_code, exception=None, **kwargs) - 以字符串的形式 返回 HTML，以供错误页面使用。
        get_current_user(self) - 查看下面的用户认证一节
        get_user_locale(self) - 返回 locale 对象，以供当前用户使用。
        get_login_url(self) - 返回登录网址，以供 @authenticated 装饰器使用（默认位置 在 Application 设置中）
        get_template_path(self) - 返回模板文件的路径（默认是 Application 中的设置）
    
    4.3 重定向(redirect)
        Tornado 中的重定向有两种主要方法：self.redirect，或者使用 RedirectHandler。
        
        你可以在使用 RequestHandler （例如 get）的方法中使用 self.redirect，将用户 重定向到别的地方。
        另外还有一个可选参数 permanent，你可以用它指定这次操作为永久性重定向。该参数会激发一个 301 Moved Permanently HTTP 状态，
        这在某些情况下是有用的，例如，你要将页面的原始链接重定向时，这种方式会更有利于搜索引擎优化（SEO）。
        
        permanent 的默认值是 False，这是为了适用于常见的操作.
        self.redirect('/some-canonical-page', permanent=True) 永久
        
        本站的下载 URL，由较短的 URL 重定向到较长的 URL 的方式
        application = tornado.wsgi.WSGIApplication([
            (r"/([a-z]*)", ContentHandler),
            (r"/static/tornado-0.2.tar.gz", tornado.web.RedirectHandler,
             dict(url="http://github.com/downloads/facebook/tornado/tornado-0.2.tar.gz")),
        ], **settings)
        
        RedirectHandler 的默认状态码是 301 Moved Permanently，不过如果你想使用 302 Found 状态码，你需要将 permanent 设置为 False。
        application = tornado.wsgi.WSGIApplication([
            (r"/foo", tornado.web.RedirectHandler, {"url":"/bar", "permanent":False}),
        ], **settings)
        
        注意，在 self.redirect 和 RedirectHandler 中，permanent 的默认值是不同的。 
        这样做是有一定道理的，self.redirect 通常会被用在自定义方法中，是由逻辑事件触发 的（例如环境变更、用户认证、以及表单提交）。
        而 RedirectHandler 是在每次匹配到请求 URL 时被触发。
        
    4.4 模板
        你可以在 Tornado 中使用任何一种 Python 支持的模板语言。
        但是相较于其它模板而言， Tornado 自带的模板系统速度更快，并且也更灵活。具体可以查看 template 模块的源码。
        
        Tornado 模板其实就是 HTML 文件（也可以是任何文本格式的文件），其中包含了 Python 控制结构和表达式，这些控制结构和表达式需要放在规定的格式标记符(markup)中：
        self.render("template.html", title="My title", items=items)
        Tornado 的模板支持“控制语句”和“表达语句”.
        控制语句是使用 {% 和 %} 包起来的 例如 {% if len(items) > 2 %}。
        表达语句是使用 {{ 和 }} 包起来的，例如 {{ items[0] }}。
        控制语句和对应的 Python 语句的格式基本完全相同。
        我们支持 if、for、while 和 try，这些语句逻辑结束的位置需要用 {% end %} 做标记。
        我们还通过 extends 和 block 语句实现了模板继承。
        
        表达语句可以是包括函数调用在内的任何 Python 表述。
        模板中的相关代码，会在一个单独 的名字空间中被执行，这个名字空间包括了以下的一些对象和方法。
        （注意，下面列表中 的对象或方法在使用 RequestHandler.render 或者 render_string 时才存在的 ，如果你在 RequestHandler 外面直接使用 template 模块，则它们中的大部分是不存在的）。
        
        escape: tornado.escape.xhtml_escape 的別名
        xhtml_escape: tornado.escape.xhtml_escape 的別名
        url_escape: tornado.escape.url_escape 的別名
        json_encode: tornado.escape.json_encode 的別名
        squeeze: tornado.escape.squeeze 的別名
        linkify: tornado.escape.linkify 的別名
        datetime: Python 的 datetime 模组
        handler: 当前的 RequestHandler 对象
        request: handler.request 的別名
        current_user: handler.current_user 的別名
        locale: handler.locale 的別名
        _: handler.locale.translate 的別名
        static_url: for handler.static_url 的別名
        xsrf_form_html: handler.xsrf_form_html 的別名
        reverse_url: Application.reverse_url 的別名
        Application 设置中 ui_methods 和 ui_modules 下面的所有项目
        任何传递给 render 或者 render_string 的关键字参数
    
        当你制作一个实际应用时，你会需要用到 Tornado 模板的所有功能，尤其是 模板继承功能。
        
        从实现方式来讲，Tornado 的模板会被直接转成 Python 代码。模板中的语句会逐字复制到一个 代表模板的函数中去。
        我们不会对模板有任何限制，Tornado 模板模块的设计宗旨就是要比 其他模板系统更灵活而且限制更少。
        所以，当你的模板语句里发生了随机的错误，在执行模板时 你就会看到随机的 Python 错误信息。

        所有的模板输出都已经通过 tornado.escape.xhtml_escape 自动转义(escape)，这种默认行为， 可以通过以下几种方式修改：
        将 autoescape=None 传递给 Application 或者 TemplateLoader、 
        在模板文件中加入 {% autoescape None %}、
        或者在简单表达语句 {{ ... }} 写成 {% raw ...%}。
        另外你可以在上述位置将 autoescape 设为一个自定义函数，而不仅仅是 None。
        
    4.5 Cookie 和安全 Cookie
        你可以使用 set_cookie 方法在用户的浏览中设置 cookie：
        self.get_cookie 获取cookie
        
        Cookie 很容易被恶意的客户端伪造。加入你想在 cookie 中保存当前登陆用户的 id 之类的信息，你需要对 cookie 作签名以防止伪造。
        Tornado 通过 set_secure_cookie 和 get_secure_cookie 方法直接支持了这种功能。 
        要使用这些方法，你需要在创建应用时提供一个密钥，名字为 cookie_secret。 你可以把它作为一个关键词参数传入应用的设置中：
        
        application = tornado.web.Application([
            (r"/", MainHandler),
        ], cookie_secret="61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=")
        
        签名过的 cookie 中包含了编码过的 cookie 值，另外还有一个时间戳和一个 HMAC 签名。
        如果 cookie 已经过期或者 签名不匹配，get_secure_cookie 将返回 None，这和没有设置 cookie 时的 返回值是一样的。
        
    4.6 用户认证
        当前已经认证的用户信息被保存在每一个请求处理器的 self.current_user 当中， 同时在模板的 current_user 中也是。
        默认情况下，current_user 为 None。
        
        要在应用程序实现用户认证的功能，你需要复写请求处理中 get_current_user() 这 个方法，在其中判定当前用户的状态，比如通过 cookie。
        
        class BaseHandler(tornado.web.RequestHandler):
            def get_current_user(self):
                return self.get_secure_cookie("user")

        class MainHandler(BaseHandler):
            def get(self):
                if not self.current_user:
                    self.redirect("/login")
                    return
                name = tornado.escape.xhtml_escape(self.current_user)
                self.write("Hello, " + name)

        class LoginHandler(BaseHandler):
            def get(self):
                self.write('<html><body><form action="/login" method="post">'
                           'Name: <input type="text" name="name">'
                           '<input type="submit" value="Sign in">'
                           '</form></body></html>')

            def post(self):
                self.set_secure_cookie("user", self.get_argument("name"))
                self.redirect("/")

        application = tornado.web.Application([
            (r"/", MainHandler),
            (r"/login", LoginHandler),
        ], cookie_secret="61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=")
        
        对于那些必须要求用户登陆的操作，可以使用装饰器 tornado.web.authenticated。 
        如果一个方法套上了这个装饰器，但是当前用户并没有登陆的话，页面会被重定向到 login_url（应用配置中的一个选项）。
        
        class MainHandler(BaseHandler):
            @tornado.web.authenticated
            def get(self):
                name = tornado.escape.xhtml_escape(self.current_user)
                self.write("Hello, " + name)

        settings = {
            "cookie_secret": "61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
            "login_url": "/login",
        }
        application = tornado.web.Application([
            (r"/", MainHandler),
            (r"/login", LoginHandler),
        ], **settings)
        
        如果你使用 authenticated 装饰器来装饰 post() 方法，那么在用户没有登陆的状态下， 服务器会返回 403 错误。
        Tornado 内部集成了对第三方认证形式的支持，比如 Google 的 OAuth 
        
    4.7 跨站伪造请求的防范
        跨站伪造请求(Cross-site request forgery)， 简称为 XSRF，是个性化 Web 应用中常见的一个安全问题。
        当前防范 XSRF 的一种通用的方法，是对每一个用户都记录一个无法预知的 cookie 数据，然后要求所有提交的请求中都必须带有这个 cookie 数据。
        如果此数据不匹配 ，那么这个请求就可能是被伪造的。
        
        Tornado 有内建的 XSRF 的防范机制，要使用此机制，你需要在应用配置中加上 xsrf_cookies 设定
        settings = {
            "cookie_secret": "61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
            "login_url": "/login",
            "xsrf_cookies": True,
        }
        application = tornado.web.Application([
            (r"/", MainHandler),
            (r"/login", LoginHandler),
        ], **settings)
        
        如果设置了 xsrf_cookies，那么 Tornado 的 Web 应用将对所有用户设置一个 _xsrf 的 cookie 值，
        如果 POST PUT DELET 请求中没有这 个 cookie 值，那么这个请求会被直接拒绝。
        如果你开启了这个机制，那么在所有 被提交的表单中，你都需要加上一个域来提供这个值。
        
        你可以通过在模板中使用 专门的函数 xsrf_form_html() 来做到这一点：
        <form action="/new_message" method="post">
          {{ xsrf_form_html() }}
          <input type="text" name="message"/>
          <input type="submit" value="Post"/>
        </form>
        
        如果你提交的是 AJAX 的 POST 请求，你还是需要在每一个请求中通过脚本添加上 _xsrf 这个值。
        function getCookie(name) {
            var r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
            return r ? r[1] : undefined;
        }

        jQuery.postJSON = function(url, args, callback) {
            args._xsrf = getCookie("_xsrf");
            $.ajax({url: url, data: $.param(args), dataType: "text", type: "POST",
                success: function(response) {
                callback(eval("(" + response + ")"));
            }});
        };
        
        对于 PUT 和 DELETE 请求（以及不使用将 form 内容作为参数的 POST 请求） 来说，你也可以在 HTTP 头中以 X-XSRFToken 这个参数传递 XSRF token。

        如果你需要针对每一个请求处理器定制 XSRF 行为，你可以重写 RequestHandler.check_xsrf_cookie()。
        例如你需要使用一个不支持 cookie 的 API， 你可以通过将 check_xsrf_cookie() 函数设空来禁用 XSRF 保护机制。
        然而如果 你需要同时支持 cookie 和非 cookie 认证方式，那么只要当前请求是通过 cookie 进行认证的，你就应该对其使用 XSRF 保护机制，这一点至关重要。
        
        
    4.8 静态文件和主动式文件缓存
        你能通过在应用配置中指定 static_path 选项来提供静态文件服务：
        settings = {
            "static_path": os.path.join(os.path.dirname(__file__), "static"),
            "cookie_secret": "61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
            "login_url": "/login",
            "xsrf_cookies": True,
        }
        application = tornado.web.Application([
            (r"/", MainHandler),
            (r"/login", LoginHandler),
            (r"/(apple-touch-icon\.png)", tornado.web.StaticFileHandler, dict(path=settings['static_path'])),
        ], **settings)
        这样配置后，所有以 /static/ 开头的请求，都会直接访问到指定的静态文件目录
        同时 /robots.txt 和 /favicon.ico 也是会自动作为静态文件处理（即使它们不是以 /static/ 开头）
        
        
    4.9 本地化
    4.10 UI 模块
    4.11 非阻塞式异步请求
        当一个处理请求的行为被执行之后，这个请求会自动地结束。
        因为 Tornado 当中使用了 一种非阻塞式的 I/O 模型，所以你可以改变这种默认的处理行为——让一个请求一直保持 连接状态，而不是马上返回，直到一个主处理行为返回。
        要实现这种处理方式，只需要 使用 tornado.web.asynchronous 装饰器就可以了。
        使用了这个装饰器之后，你必须调用 self.finish() 已完成 HTTTP 请求，否则 用户的浏览器会一直处于等待服务器响应的状态：
        
        class MainHandler(tornado.web.RequestHandler):
            @tornado.web.asynchronous
            def get(self):
                self.write("Hello, world")
                self.finish()
        
        使用 Tornado 内置的异步请求 HTTP 客户端去调用 FriendFeed 的 API 
        class MainHandler(tornado.web.RequestHandler):
            @tornado.web.asynchronous
            def get(self):
                http = tornado.httpclient.AsyncHTTPClient()
                http.fetch("http://friendfeed-api.com/v2/feed/bret",
                           callback=self.on_response)

            def on_response(self, response):
                if response.error: raise tornado.web.HTTPError(500)
                json = tornado.escape.json_decode(response.body)
                self.write("Fetched " + str(len(json["entries"])) + " entries "
                           "from the FriendFeed API")
                self.finish()
                
        例子中，当 get() 方法返回时，请求处理还没有完成。在 HTTP 客户端执行它的回 调函数 on_response() 时，从浏览器过来的请求仍然是存在的，
        只有在显式调用了 self.finish() 之后，才会把响应返回到浏览器。
        
        如果你使用到了 long polling，你可能需要复写on_connection_close()， 这样你可以在客户连接关闭以后做相关的清理动作。
        
    4.12 异步 HTTP 客户端
        Tornado 包含了两种非阻塞式 HTTP 客户端实现：SimpleAsyncHTTPClient 和 CurlAsyncHTTPClient。
        前者是直接基于 IOLoop 实现的，因此无需外部依赖关系。 
        后者作为 Curl 客户端，需要安装 libcurl 和 pycurl 后才能正常工作，但是对于使用 到 HTTP 规范中一些不常用内容的站点来说，它的兼容性会更好。
        为防止碰到 旧版本中异步界面的 bug，我们建议你安装最近的版本的 libcurl 和 pycurl。

        这些客户端都有它们自己的模组(tornado.simple_httpclient 和 tornado.curl_httpclient)，
        你可以通过 tornado.httpclient 来指定使用哪一种 客户端，
        
        默认情况下使用的是 SimpleAsyncHTTPClient。
        如果要修改默认值，只要 在一开始调用 AsyncHTTPClient.configure 方法即可：
        AsyncHTTPClient.configure('tornado.curl_httpclient.CurlAsyncHTTPClient')
        
    4.13 第三方认证
    4.14 调试模式和自动重载
        如果你将 debug=True 传递给 Application 构造器，该 app 将以调试模式 运行。
        在调试模式下，模板将不会被缓存，而这个 app 会监视代码文件的修改， 如果发现修改动作，这个 app 就会被重新加载。在开发过程中，这会大大减少 手动重启服务的次数。
        然而有些问题（例如 import 时的语法错误）还是会让服务器 下线，目前的 debug 模式还无法避免这些情况。

        调试模式和 HTTPServer 的多进程模式不兼容。在调试模式下，你必须将 HTTPServer.start 的参数设为不大于 1 的数字。
        调试模式下的自动重载功能可以通过独立的模块 tornado.autoreload 调用， 作为测试运行器的一个可选项目，tornado.testing.main 中也有用到它。
    
性能
生产环境下的部署
WSGI 和 Google AppEngine
注意事项和社区支持


mqtt liyong
