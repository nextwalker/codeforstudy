第7章 更加抽象
python被称为面向对象的语言

7.1 对象的魔力
    多态 polymorphism 可以对不同类的对象使用同样的操作。
    封装 encapsulation 对外部世界隐藏对象的工作细节。
    继承 inheritance   以普通的类为基础建立专门的类对象。
    
    多态
    意味着就算不知道变量所引用的对象类型是什么，还是能对它进行操作。它会根据对象或类类型的不同而表现出不同的行为。
    
    购物车 商品价格存储，拍卖的可变价格就无法做冗余
    isinstance进行类型或类检查是为了说明一点 类型检查一般说来并不是什么好方法，能不用则不用。
    
    多态和方法
    不需要检测类型，有对应的方法就可以了。
    
    多态的多重形式
    add(1,2) add('fish', 'license')
    
    repr函数是多态特性的代表之一，可以对任何东西使用。
    repr(123) + 'abx' ok 
    123 + 'abx' not ok 
    
    类型检查 type isinstance issubclass 会毁掉多态的方式，尽力避免。
    
    真正重要的是如何让对象按照你所希望的方式工作，不管他是否是正确的类型或类。
    
    duck typing
    
    封装
    是对全局作用域中其他区域隐藏多余信息的原则。
    使用对象而不用知道其内部细节。
    
    抽象的原则
    帮助处理程序组件而不用过多关心多余细节，就像函数。
    
    多态 让用户对于不知道是什么类或对象类型的对象进行方法调用
    封装 可以不用关心对象是如何构建的而直接进行使用。
    对象的状态由它的特性来描述，对象的方法可以改变它的特性。
    
    继承， 抽象
    
7.2 类和类型
    class instance subclass superclass
    子类的关系是隐式的。
    
    创建自己的类
    __metaclass__ = type 确实使用新式类
    class Person:
        def setName(self, name):
            self.name = name
        def getName(self):
            return self.name
        def greet(self):
            print "Hello world! i'm %s" % self.name
    
    self参数让对象自动将自己作为第一个参数传入函数中，因此形象地命名为self
    没有self的话，成员方法就无法访问他们要对某些特性进行操作的对象本身了。
    
    instance.method = function  函数变量？？
    instance.method()    
    
    self参数并不取决于调用方法的方式， 目前是实例调用方法，可以随意使用引用同一方法的其他变量。
    bird.sing() #def sing(self)
    birdsong = bird.sing # 绑定到类的相同实例上。
    birdsong() #也可以获取self对象 
    
    私有化
    c.name
    c.getName()
    都能访问到c.name 
    有些人认为这样就破坏了封装的原则。（Smalltalk之父，smalltalk的对象特性只允许有同一个对象的方法访问）
    他们认为对象的状态对于外部应该是完全隐藏(不可访问)的。
    closedObject ？？
        内部不同的地方的修改可能做的事情不一致。
    私有特性，通过访问器accessor来访问getName setName
    
    python 并不直接支持私有方式，靠程序员把握
    让方法或者特性变为私有，只要在它的名字前面加上双下划线即可。
    def __inaccessible(self) # 外部无法访问，内部可以访问
    无法访问 s.__inaccessible()
    可以访问 s._Secretive__inaccessible()
    所有以双下划线开始的名字都被翻译成前面加上单下划线和类名的形式
    
    名称变化书 是一个不该访问的强有力信号
    
    如果不需要使用这种方法，但是又想让其他对象不要访问内部数据，可以使用单下划线。
    前面有下划线的名字都不会被带星号的import语句导入（from module import *）
    
    类的命名空间
    所有位于class语句中的代码都在特殊的命名空间中执行--类命名空间。
    这个命名空间可由类内所有成员访问。
    
    并不是所有的python程序员都知道类的定义其实就是执行代码块。
    class下的member变量可以被所有成员（实例）访问，用来计算类的成员数量。
    
    指定超类
        常用init做初始化函数
    class SPAMFilter(Filter) 继承
    
    return [x for x in sequence if x not in self.blocked] 赞
    参数，方法的调用时的参数与方法定义时的第二个参数开始对应。
    
    调查继承
    issubclass(subclass, class)
    访问基类
    SPAMFilter.__base__ 返回(xxx)
    isinstance （建议多使用多态）
    instance.__class__
    新式类 还可以使用type(s)
    
    多个超类
    class TalkingCalculator(Calculator, Talker):
    多重继承
    一个方法从多个超类继承的时候，（同名方法）先继承的类的方法会重写后继承的类的方法。
    查找给定方法或者特性时访问超类的顺序称为MRO（方法判定顺序）
    
    接口和内省
    python不用显式地编写接口，可以假定已经实现你所要求的行为了，如果它不能实现的话，程序就会失败。
    
    另外一种，检查所需的方法
    hasattr(tc, 'talk') 是否有talk的特性（包含方法）
    callable(getattr(tc, 'talk', None))
    python3.0 hasattr(x.'__call__')来代替callable(x)
    
    getattr()
    setattr(tc, 'name', 'Mr. Gumby')
    
    如果要查看对象内所有存储的值，可以使用__dict__特性。
    如果真的想要找到对象是由什么组成，可以看看inspect模块。
    编写对象浏览器准备的功能。
    
7.3 一些关于面向对象设计的思考
    将属于一类的对象放在一起。 特性和方法
    不要让对象过于亲密。方法应该只关注自己实例的特性，让其他实例管理自己的状态。
    要小心继承，尤其是多重继承。 多重继承难以正确使用，更难以调试。
    简单就好。让你的方法小巧。
    
    1. 问题的描述 程序要做什么
    2. 名称用作可能的类
    3. 动词用作可能的方法
    4. 形容词用作可能的特性
    5. 把所有的方法和特性分配到类。
    