基本概念：变量与常量、算术运算、控制流、函数、基本输入/输出
重要特性：指针、结构、c语言中十分丰富的运算符集合、部分控制流语句以及标准库，编写较大型程序所涉及的重要特性

学习一门新程序设计语言的唯一途径就是使用它编写程序。

每个程序都从main函数的起点开始执行，这意味着每个程序都必须在某个位置包含一个main函数

变量 函数 包含函数库 printf函数（永远不会自动换行）

注释 /* */ //
在c语言中，所有变量都必须先声明后使用。声明通常放在函数起始处，在任何可执行语句之前。
int 16/32
float 32
char 字符
short 短整型
long 长整型
double 双精度浮点型
这些数据类型对象的大小也取决于具体的机器

还存在基本数据类型 数组、结构、联合、指针 函数

C编译器并不关心程序的外观形式，但正确的缩进以及保留适当空格的程序设计风格对程序的易读性非常重要。
5/9 = 0整数除法

printf函数并不是C语言本身的一部分，C语言本身并没有定义输入、输出功能
输出对齐问题 %3d

即使浮点常量取的是整型值，在书写时最好还是为它加上一个显式的小数点，这样可以强调其浮点性质，便于阅读
%d
%6d 至少6个字符宽
%f
%.2f 小数点后有两位小数
%6.2f 至少6个字符宽，小数点后有两位小数
%o 标示八进制数
%x 标示十六进制数
%c 标示字符
%s 标示字符串
%% 标示百分号本身

while循环
for循环

表达式作为参数
在允许使用某种类型变量值的任何场合，都可以使用该类型的更复杂的表达式。

for和while是类似的
for语句比较适合初始化和增加步长都是单条语句并且逻辑相关的情形，因为它将循环控制语句集中放在一起，且比while语句更紧凑。

符号常量
程序中使用300.20等类似的"幻数"并不是一个好习惯，因为他们几乎无法向以后阅读该程序的人提供什么信息，而使程序的修改变得更加困难。
处理这种幻数的一种方法就是赋予他们有意义的名字。
#define指令可以把符号名或称为符号常量定义为一个特定的字符串。
#define
在该定义之后，程序中出现的所有在#define中定义的名字（既没有用引号引起来，也不是其他名字的一部分）都将用相应的替换文本替换。
其中，名字与普通变量名的形式相同:他们都是以字母大头的字母或数字序列；替换文本可以是任何字符序列，而不仅限于数字
符号常量非变量，因此不需要出现在声明中。
符号常量通常用大写字符拼写。

字符输入/输出
标准库提供的输入/输出模型非常简单。
无论文本从何处输入，输出到何处，其输入输出都是按照字符流的方式处理
文本流是由多行字符构成的字符序列，而每行字符则有0个或多个字符组成，行末是一个换行符。
标准库负责使每个输入/输出流都能够遵守这一模型。使用标准库的C语言程序员不必关心在程序之外这些行是如何表示的。
getchar putchar 通常是键盘输入

EOF 文件结束符（可能大于char的值，因此要声明int） 定义在stdio.h中
这里使用常量，可以确保程序不需要其对应的任何特定的整数值

++
字符计数
行计数

单引号中的字符表示一个整型值，该值等于此字符在机器字符集中对应的数值，我们成为字符常量。
单词计数

数组 函数 参数

字符数组

外部变量与作用域

