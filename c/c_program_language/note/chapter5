第五章 指针与数组

指针是一种保存变量地址的变量。

& 取一个对象的地址 
* 间接寻址或间接引用运算符
地址运算符只能应用于内存中的对象，即变量和数组
不能作用于表达式、常量或者register类型的变量

int *p 该语句表明*ip的结果是int类型

指针只能某种特定类型的对象，也就是说，每个指针都必须指向某种特定的数据类型
（void类型的指针可以存放指向任何类型的指针，但他不能间接引用其自身）

++*ip = (*ip)++
类似于* ++ 这样的一员运算符遵循从右至左的结合顺序
iq = ip （复制指针，因为指针也是变量）

5.2 指针与函数参数
指针参数使得被调用函数能够访问和修改主调函数中对象的值

5.3 指针和数组
计算a[i] 实际上是先将其转换成*(a+i)的形式然后求值的。两种形式等价的
a + i = &a[i]
pa = &a[0] 等同于pa = a
数组加下标实现的表达式可等价地通过指针和偏移量实现

指针是一个变量，因此pa = a, pa++是合法的
数组名不是一个变量，因此a = pa, a++ 是非法的

数组名参数必须是一个指针，也就是一个存储地址值的变量（局部变量）
形式参数 char s[] 和 char *s
f(&a[2]) 与 f(a+2)

5.4 地址算术运算

