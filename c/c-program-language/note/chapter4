第四章 函数与程序结构


4.6 静态变量
用static声明限定外部变量与函数，可以将其后声明的对象的作用域限定为被编译源文件的剩余部分。（仅供其所在的源文件的函数使用，其他函数不能访问）
通过static限定外部对象，可以达到隐藏外部对象的目的。

外部的static声明通常多用于变量。函数也可以，不过一般函数是全局可以访问的。

static也可以用于声明内部变量
static类型的内部变量是一种只能在某个特定函数中使用但一直占据存储空间的变量。
（在调用前后一直存在）

4.7 寄存器变量
register将变量放在机器的寄存器中，可以使程序更小，执行速度更快。编译器可忽略此选项。
寄存器变量的数目和类型的具体限制在不同的机器中是不同的，而且他的地址都是不能访问的。

4.8 程序块结构
c不允许在函数中定义函数。
函数、复合语句可以以程序块结构的形式定义变量。这种方式声明的变量可以隐藏程序块外与之同名的变量，他们之间没有任何关系。

一种好的程序设计风格中，应该避免出现变量名隐藏外部作用域中相同名字的情况。

4.9 初始化
在不进行显示初始化的情况下，外部变量和静态变量都将被初始化为0，而自动变量和寄存器变量的初值则没有定义（即初值为无用的信息）

对于外部变量与静态变量来说，初始化表达式必须是常量表达式，且只初始化一次（从概念上讲是在程序开始执行前进行初始化）。对于自动变量和寄存器变量，则在每次进入函数或程序快时都将被初始化。

对于自动变量与寄存器变量来说，初始化表达式可以不是常量表达式，表达式中可以包含任意在此表达式之前已经定义的值，包括函数调用。

考虑到变量声明中的初始化表达式容易被人忽略，且距使用的位置较远，我们一般使用显式的赋值语句。

char pattern[] = "ould ";
char pattern[] = {'o', 'u', 'l', 'd'};
等价的，数组的长度都是5.

4.10 递归
递归的执行速度并不快，但是递归代码比较紧凑，更易于编写和理解

4.11 C预处理器
文件包含 #include "文件名" 或者 #include <文件名> （编译前被替换）
引号引起来，则在源文件所在的位置查找该文件，
如果在该位置没有找到文件，或者如果文件名是用尖括号<>括起来的，则将根据相应的规则查找该文件，这个规则同具体的实现有关。
被包含的文件本身也可以包含#include指令

通常文件开头的#include指令用以包含常见的#define语句和extern声明，或从头文件中访问库函数的函数原型声明。

保证所有的源文件都具有相同的定义与变量声明。
如果某个包含文件的内容发生了变化，那么所有依赖于该包含文件的源文件都需要重新编译

宏替换
#define 名字 替换文本
#define forever for(;;)
#define max(A, B) ((A) > (B) ? (A) : (B))

缺陷参数表达式要重复计算两次，如果有自增，则表达式会存在副作用。
要适当使用圆括号来保证计算次序的正确性。

stdio.h getchar putchar函数在实际中常常被定义为宏，这样可以避免处理字符时调用函数所需的运行时开销。
ctype.h 头文件中定义的函数也常常是通过宏实现的

#undef
##

条件包含
#if
#endif
#ifndef
#ifdef



