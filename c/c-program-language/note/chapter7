第七章 输入与输出

/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/include

输入输出功能并不是c语言本身的组成部分。
标准库是可移植的的

7.1 标准输入输出
    文本输入输出模式
    文本流是由一系列行组成，每一行的结尾是一个换行符。
    标准库会通过一些措施使得该系统适应这种模式（回车符和换行符都替换为换行符，输入输出都会替换）
    标准输入（一般为键盘）
    
    int getchar(void)  每次调用返回下一个输入字符，文件结尾，返回EOF
    符号常量EOF在<stdio.h>中定义，其值一般为-1.
    应该使用EOF来测试文件是否结束，这样才能保证程序同EOF的特定值无关。
    
    输入重定向
    prog < infile （prog本身并不在意输入方式的改变，并且字符串<infile也并不包含在argv的命令行参数中）
    otherprog | prog 管道（管道机制输入切换） 
    
    int putchar(int) 输出数据，将字符c送至标准输出上。默认 标准输出是屏幕显示。
    没错误，返回输出的字符，发生了错误，返回EOF
    
    输出重定向
    prog > 输出文件名
    prog | otherprog
    
    printf()  
    #inlcude <stdio.h>
    当文件名有一对尖括号<>括起来的时候，预处理器将在由具体实现定义的有关位置查找指定的文件夹。 unix: /usr/inlcude mac /Library
    
    许多程序只从一个输入流中读取数据，并且只向一个输出流中输出数据，getchar puchar printf足够了。
    重定向更是如此。
    
    tolower <ctype.h> 它把大写字母转换为小写形式，并把其字符原样返回。
    getchar puchar tolower这些“函数” 一般都是宏，这样就避免了对每个字符都进行函数调用的开销。
    
7.2 格式化输出 printf函数
    输出函数printf 将内部数值转换为字符的形式。
    int printf(char *format, arg1, arg2, ...);
    
    格式字符串包行两种类型的对象:普通字符和转换说明。
    普通字符 原样不动的复制到输出流中
    转换说明 替换输出到输出流中。   一个百分号%开始，一个转换字符结束
        负号 左对齐的形式输出
        数  指定最小字段宽度， 多余的字符位置用空格填充以保证最小宽度
        小数点 用于将字段宽度和精度分开
        数 用于指定精度，字符串中要打印的最大字符数，浮点数小数点后的位数，整形最少输出的数字数目
        字母h或l h表不将整数作为short类型打印 l表示将整数作为long类型打印。 （不懂）
        
    printf("%.*s", max, s) 
    宽度和精度都可以用星号*表示，这时，宽度和精度的值通过转换下一个参数来计算。必须为int类型
    
    最小宽度可以超过 精度不能超过，最大字符数
    %15.10s  %-15.10s
    
    int sprintf(char *string, char *format, arg1, arg2, ...)
    将输出保存到第一个字符串中。string
        
7.3 变长参数表
    
    函数printf的正确声明形式为
    int printf(char *fmt, ...) 返回的是实际输出的字符数
    省略号表示参数表中，参数的数量和类型是可变的。
    省略号只能出现在参数表的尾部
    
    void minprintf(char *fmt, ...)
    处理一个甚至连名字都没有的参数表
    
    标准头文件<stdarg.h>中包含一组宏定义，他们对如何遍历参数表进行了定义。
    该头文件的实现因不同的机器而不同，但提供的接口是一致的。
    va_list 类型用于声明一个变量，该变量将依次引用各参数。
    ap 参数指针
    宏va_start将ap初始化为指向第一个无名参数的指针。在使用ap之前，该宏必须被调用一次。
    参数表必须至少包含一个有名参数，va_start将最后一个有名参数作为起点。
    每次调用va_arg,该函数都将返回一个参数，并将ap指向下一个参数。
    va_arg使用一个类型名来决定返回的对象类型，指针移动的步长。
    函数返回之前调用va_end，已完成一些必要的清理工作。
    
    va_list ap;
    va_start(ap, fmt);
    va_arg(ap, int);
    va_end(ap);
    
7.4 格式化输入-scanf函数
    
    int scanf(char *format, ...)
    scanf函数从标准输入中读取字符序列，按照format中的格式说明对字符序列进行解释，并把结果保存到其它参数中。
    其他所有参数都必须是指针，用于指定经格式转换后的相应输入保存的位置。
    
    int sscanf(char *string, char *format, arg1, arg2, ...)
    
7.5 文件访问
    标准输入和标准输出都是操作系统自动提供给程序访问的
    
    文件访问程序 (文件还没有连接到该程序)
    
    fopen函数 返回一个随后可以用于文件读写操作的指针。
    文件指针，指向一个包含文件信息的结构。
        信息: 缓冲区的位置、缓冲区当前字符的位置，文件的读或写状态，是否出错，是否已经到达文件结尾。
        在stdio.h中已经定义了
    FILE *fp;
    FILE *fopen(char *name, char *model);
    FILE像int一样是一个类型名，而不是结构标记，他是通过typedef定义的。
    model r w a (某些系统还区分文本文件和二进制文件，对后者的访问需要在模式字符串中增加字符b)
    
    如果打开一个不存在的文件用于写或追加，该文件将被创建(如果可能的话)
    如果一写的方式打开一个已存在的文件时，该文件的原内容将被覆盖。
    如果打开一个不存在的文件用于读，会导致错误。 读取一个无读取权限的文件，也会导致错误。
    如果发生错误，fopen将返回NULL。
    
    文件读写
    int getc(FILE *fp)  需要知道文件指针，以及位置 如果到达文件尾或者出现错误，该函数将返回EOF
    int putc(int c, FILE *fp) 返回的是写入的字符   如果发生错误，则返回EOF
    getc 和 putc 类似于getchar putchar 是宏，而不是函数。
    
    启动一个C语言程序时，操作系统环境负责打开三个文件，并将这三个文件的指针提供给该程序。
    三个文件，标准输入stdin 标准输出stdout 标准错误stderr <stdio.h>
    在大多数环境中， stdin指向键盘， stdout stderr指向显示器。 可以重定向。
    
    #define getchar getc(stdin)
    #define putchar(c) putc((c), stdout)
    
    文件的格式化输入或输出
    int fscanf(FILE *fp, char *format, ...)
    int fprintf(FILE *fp, char *format, ...)
    
    stdin stdout 都是FILE *类型的对象。但它们是常量，而非变量，因此不能对他们进行赋值。
    
    int fclose(FILE *fp)
    执行和fopen相反的操作，它断开由fopen函数建立的文件指针和外部名之间的连接，并释放文件指针以供其他文件使用。
    大多数操作系统都限制了一个程序可以同时打开的文件数，所以当文件不再需要的时候就应该释放，这是一个好的编程习惯。
    对输出文件执行fclose的另一个原因: 它将把缓冲区中由putc函数正在收集的输出写到文件中
    
    当程序正常终止时，程序会自动为每个打开的文件调用fclose函数。
    如果不需要使用stdin和stdout, 可以把他们关闭掉，可以通过库函数freopen重新指定他们。
    
7.6 错误处理 stderr exit
    标准错误输出
    exit 终止调用程序的执行。任何调用该程序的进程都可以获取exit的参数值。
    可通过另一个将该程序作为子进程的程序来测试该程序的执行是否成功。
    惯例，返回值0表示一切正常，而非0值通常表示出现了异常情况。
    exit为每个已打开的输出文件调用fclose函数，已将缓冲区中的所有输出写到相应的文件中。
    
    main中 return expr等价于 exit(expr)
    exit还有一个优点，它可以从其它函数中调用，并且可以用类似于第五章描述的模式查找程序查找这些调用。 ？？
    
    如果流fp中出现错误，则函数ferror返回一个非0值。
    int ferror(FILE *fp)
    尽管输出错误很少出现，但还是存在的，比如当磁盘满时。
    成熟的产品程序应该检查这种类型的错误。
    
    函数feof(FILE *fp)与ferror类似，如果指定的文件到达文件结尾，它将返回一个非0值。
    int feof(FILE *fp)
    
    任何重要的程序来说，都应该让程序返回有意义且有用的值。
    
7.7 行输入和行输出
    标准库提供了一个输入函数fgets （getline）
    char *fgets(char *line, int maxline, FILE *fp)
    
    fgets函数从fp指向的文件中读取下一个输入行(包括换行符)，并将它存放在字符数组line中，它最多可读取maxline-1个字符。
    读取的行将以'\0'结尾保存到数组中。
    通常情况下，fgets返回line，但如果遇到了文件结尾或发生了错误，则返回null
    (我们编写的getline函数返回行的长度，这个值更有用，当它为0时意味着已经到达了文件的结尾)
    
    输出函数fputs将一个字符串(不需要包含换行符)写入到一个文件中。
    int fputs(char *line, FIFL *fp)
    如果发生错误，该函数将返回EOF，否则返回一个非负值。
    
    库函数gets和puts的功能与fgets和fputs函数类似，但他们是对stdin和stdout进行操作。
    gets函数在读取字符串时将删除结尾的换行符('\n')
    puts函数在写入字符串时将在结尾增加一个换行符。
    
    ANSI标准规定，ferror在发生错误时返回非0值，而fputs在发生错误时返回EOF，其它情况返回一个非负值。
    
7.8 其他函数
    字符串操作函数<string.h>
    
    字符类别测试和转换函数<ctype.h>
    
    unget函数
    
    命令执行函数 system()
    
    存储管理函数
    
    数学函数
    
    随机数发生器函数
    
    
1. 那里查找getchar 的定义。getchar是宏，定义在哪里？